/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * What is left:
 * 
 * I need to enhance the routing once again,
 * something is wrong somewhere with the edges and thus I'm unable to achieve
 * the shortest routes
 * 
 * Create the printouts for the station by station instructions for commuting
 */

package MRT;

import static DataLoader.DataLoader.*;
import DataLoader.Station;
import static MRT.SearchMode.searchSaved;
import de.vogella.algorithms.dijkstra.model.Vertex;
import static de.vogella.algorithms.dijkstra.model.Vertex.computePaths;
import static de.vogella.algorithms.dijkstra.model.Vertex.getShortestPathTo;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Nixholas
 */
public class MainFrame extends javax.swing.JFrame {
    String Start, Destination = null;
    public static MainFrame saved;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() throws IOException {
        initComponents();
        configureMF();

        StartBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Add all the stations from the StartBox to the Destination Box
                for (Station s : stations.values()) {
                    DestBox.addItem(s.getName());
                }
                //Remove the selected station from the start in DestBox
                if (StartBox.getSelectedIndex() != -1) {
                    resetDBox();
                }
                // Removes the selected station at the StartBox
                try {
                DestBox.removeItemAt(StartBox.getSelectedIndex());
                } catch (Exception ex) {
                    
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StartBox = new javax.swing.JComboBox<String>();
        DestBox = new javax.swing.JComboBox<String>();
        searchMode = new javax.swing.JButton();
        computeBtn = new javax.swing.JButton();
        txtBox = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        StartBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        DestBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DestBox.setToolTipText("");

        searchMode.setText("Search Mode");
        searchMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchModeActionPerformed(evt);
            }
        });

        computeBtn.setText("Compute");
        computeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 611, Short.MAX_VALUE)
                                .addComponent(searchMode, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(StartBox, 0, 365, Short.MAX_VALUE)
                            .addComponent(DestBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addComponent(computeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(StartBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(DestBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(computeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(txtBox, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(searchMode, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchModeActionPerformed
        saved = this;
        this.setVisible(false);
        searchSaved.setVisible(true);
    }//GEN-LAST:event_searchModeActionPerformed

    private void computeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeBtnActionPerformed
        try {
            Start = StartBox.getSelectedItem().toString();
            Destination = DestBox.getSelectedItem().toString();
            // Invoke a method to compute the distance/travel
            computeTravel(Start, Destination);
            Start = null;
            Destination = null;
            configureMF();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_computeBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        DataLoader.DataLoader.loadMRTtxt("MRT.txt", "Stations.xml");

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainFrame().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public void configureMF() throws IOException {
        StartBox.removeAllItems();
        DestBox.removeAllItems();

        for (Station s : stations.values()) {
            StartBox.addItem(s.getName());
        }
    }

    /**
     * This method is required into order for DestBox to be properly reset after
     * StartBox's station has been re-selected.
     */
    public void resetDBox() {
        // Removes all elements
        DestBox.removeAllItems();

        //Repopulate the JComboBox again
        for (Station s : stations.values()) {
            DestBox.addItem(s.getName());
        }
    }

    public static String computeTravel(String Start, String Dest) {
        /**
         * Compute the number of stations from start to the destination OR To
         * the interchange
         */
        Vertex start = null;
        Vertex dest = null;
        boolean startSet = false;
        boolean endSet = false;
        for (Vertex v : bigArray) {
            if (v.stnName.equalsIgnoreCase(Start) || v.stnCode.equalsIgnoreCase(Start)) {
                start = v;
                startSet = true;
            } else if (v.stnName.equalsIgnoreCase(Dest) || v.stnCode.equalsIgnoreCase(Dest)) {
                dest = v;
                endSet = true;
            }

            if (startSet == true && endSet == true) {
                computePaths(start); // run Dijkstra
                System.out.println("Distance to " + dest + ": " + dest.minDistance);
                List<Vertex> path = getShortestPathTo(dest);
                System.out.println("Path: " + path);
            }
        }

        return null;
    }

    public void textFieldLoop() {

//        TextField.setText(null);
//        TextField.setText("Current Station: " + StartBox.getSelectedItem().toString() + "\n" + 
//                "Destination Station: " + DestBox.getSelectedItem().toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> DestBox;
    private javax.swing.JComboBox<String> StartBox;
    private javax.swing.JButton computeBtn;
    private javax.swing.JButton searchMode;
    private javax.swing.JTextField txtBox;
    // End of variables declaration//GEN-END:variables
}
